
# Imports
import pandas            as pd
import streamlit         as st
import numpy             as np
from sklearn.cluster import KMeans 
import matplotlib.pyplot as plt
import seaborn as sns

from datetime            import datetime
from PIL                 import Image
from io                  import BytesIO

def convert_df(df):
    return df.to_csv(index=False).encode('utf-8')

# Fun√ß√£o para converter o df para excel
def to_excel(df):
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df.to_excel(writer, index=False, sheet_name='Sheet1')
    writer.close()
    processed_data = output.getvalue()
    return processed_data


### Criando os segmentos
def recencia_class(x, r, q_dict):
    """Classifica como melhor o menor quartil 
       x = valor da linha,
       r = recencia,
       q_dict = quartil dicionario   
    """
    if x <= q_dict[r][0.25]:
        return 'A'
    elif x <= q_dict[r][0.50]:
        return 'B'
    elif x <= q_dict[r][0.75]:
        return 'C'
    else:
        return 'D'

def freq_val_class(x, fv, q_dict):
    """Classifica como melhor o maior quartil 
       x = valor da linha,
       fv = frequencia ou valor,
       q_dict = quartil dicionario   
    """
    if x <= q_dict[fv][0.25]:
        return 'D'
    elif x <= q_dict[fv][0.50]:
        return 'C'
    elif x <= q_dict[fv][0.75]:
        return 'B'
    else:
        return 'A'

# Fun√ß√£o principal da aplica√ß√£o
def main():
    # Configura√ß√£o inicial da p√°gina da aplica√ß√£o
    st.set_page_config(page_title = 'RFV', \
        layout="wide",
        initial_sidebar_state='expanded'
    )

    # T√≠tulo principal da aplica√ß√£o
    st.write("""# RFV

    RFV significa rec√™ncia, frequ√™ncia, valor e √© utilizado para segmenta√ß√£o de clientes baseado no comportamento 
    de compras dos clientes e agrupa eles em clusters parecidos. Utilizando esse tipo de agrupamento podemos realizar 
    a√ß√µes de marketing e CRM melhores direcionadas, ajudando assim na personaliza√ß√£o do conte√∫do e at√© a reten√ß√£o de clientes.

    Para cada cliente √© preciso calcular cada uma das componentes abaixo:

    - Rec√™ncia (R): Quantidade de dias desde a √∫ltima compra.
    - Frequ√™ncia (F): Quantidade total de compras no per√≠odo.
    - Valor (V): Total de dinheiro gasto nas compras do per√≠odo.

    E √© isso que iremos fazer abaixo.
    """)
    st.markdown("---")
    
    # Apresenta a imagem na barra lateral da aplica√ß√£o
    # image = Image.open("Bank-Branding.jpg")
    # st.sidebar.image(image)

    # Bot√£o para carregar arquivo na aplica√ß√£o
    st.sidebar.write("## Suba o arquivo")
    data_file_1 = st.sidebar.file_uploader("Bank marketing data", type = ['csv','xlsx'])

    # Verifica se h√° conte√∫do carregado na aplica√ß√£o
    if (data_file_1 is not None):
        df_compras = pd.read_csv(data_file_1, infer_datetime_format=True, parse_dates=['DiaCompra'])

        st.write('## Rec√™ncia (R)')

        
        dia_atual = df_compras['DiaCompra'].max()
        st.write('Dia m√°ximo na base de dados: ', dia_atual)

        st.write('Quantos dias faz que o cliente fez a sua √∫ltima compra?')

        df_recencia = df_compras.groupby(by='ID_cliente', as_index=False)['DiaCompra'].max()
        df_recencia.columns = ['ID_cliente','DiaUltimaCompra']
        df_recencia['Recencia'] = df_recencia['DiaUltimaCompra'].apply(lambda x: (dia_atual - x).days)
        st.write(df_recencia.head())

        df_recencia.drop('DiaUltimaCompra', axis=1, inplace=True)

        st.write('## Frequ√™ncia (F)')
        st.write('Quantas vezes cada cliente comprou com a gente?')
        df_frequencia = df_compras[['ID_cliente','CodigoCompra']].groupby('ID_cliente').count().reset_index()
        df_frequencia.columns = ['ID_cliente','Frequencia']
        st.write(df_frequencia.head())

        st.write('## Valor (V)')
        st.write('Quanto que cada cliente gastou no periodo?')
        df_valor = df_compras[['ID_cliente','ValorTotal']].groupby('ID_cliente').sum().reset_index()
        df_valor.columns = ['ID_cliente','Valor']
        st.write(df_valor.head())
        

        st.write('## Tabela RFV final')
        df_RF = df_recencia.merge(df_frequencia, on='ID_cliente')
        df_RFV = df_RF.merge(df_valor, on='ID_cliente')
        df_RFV.set_index('ID_cliente', inplace=True)
        st.write(df_RFV.head())

        st.write('## Segmenta√ß√£o utilizando o RFV')
        st.write("Um jeito de segmentar os clientes √© criando quartis para cada componente do RFV, sendo que o melhor quartil √© chamado de 'A', o segundo melhor quartil de 'B', o terceiro melhor de 'C' e o pior de 'D'. O melhor e o pior depende da componente. Po exemplo, quanto menor a rec√™ncia melhor √© o cliente (pois ele comprou com a gente tem pouco tempo) logo o menor quartil seria classificado como 'A', j√° pra componente fr√™quencia a l√≥gica se inverte, ou seja, quanto maior a fr√™quencia do cliente comprar com a gente, melhor ele/a √©, logo, o maior quartil recebe a letra 'A'.")
        st.write('Se a gente tiver interessado em mais ou menos classes, basta a gente aumentar ou diminuir o n√∫mero de quantils pra cada componente.')

        st.write('Quartis para o RFV')
        quartis = df_RFV.quantile(q=[0.25,0.5,0.75])
        st.write(quartis)

        st.write('Tabela ap√≥s a cria√ß√£o dos grupos')
        df_RFV['R_quartil'] = df_RFV['Recencia'].apply(recencia_class,
                                                        args=('Recencia', quartis))
        df_RFV['F_quartil'] = df_RFV['Frequencia'].apply(freq_val_class,
                                                        args=('Frequencia', quartis))
        df_RFV['V_quartil'] = df_RFV['Valor'].apply(freq_val_class,
                                                    args=('Valor', quartis))
        df_RFV['RFV_Score'] = (df_RFV.R_quartil 
                            + df_RFV.F_quartil 
                            + df_RFV.V_quartil)
        st.write(df_RFV.head())

        st.write('Quantidade de clientes por grupos')
        st.write(df_RFV['RFV_Score'].value_counts())

        st.write('#### Clientes com menor rec√™ncia, maior frequ√™ncia e maior valor gasto')
        st.write(df_RFV[df_RFV['RFV_Score']=='AAA'].sort_values('Valor', ascending=False).head(10))

        st.write('### A√ß√µes de marketing/CRM')

        dict_acoes = {'AAA': 'Enviar cupons de desconto, Pedir para indicar nosso produto pra algum amigo, Ao lan√ßar um novo produto enviar amostras gr√°tis pra esses.',
        'DDD': 'Churn! clientes que gastaram bem pouco e fizeram poucas compras, fazer nada',
        'DAA': 'Churn! clientes que gastaram bastante e fizeram muitas compras, enviar cupons de desconto para tentar recuperar',
        'CAA': 'Churn! clientes que gastaram bastante e fizeram muitas compras, enviar cupons de desconto para tentar recuperar'
        }

        df_RFV['acoes de marketing/crm'] = df_RFV['RFV_Score'].map(dict_acoes)
        st.write(df_RFV.head())


        # df_RFV.to_excel('./auxiliar/output/RFV_.xlsx')
        df_xlsx = to_excel(df_RFV)
        st.download_button(label='üì• Download',
                            data=df_xlsx ,
                            file_name= 'RFV_.xlsx')

        st.write('Quantidade de clientes por tipo de a√ß√£o')
        st.write(df_RFV['acoes de marketing/crm'].value_counts(dropna=False))

        st.write('Quantidade de clientes por tipo de a√ß√£o')

        st.write(df_RFV['acoes de marketing/crm'].value_counts(dropna=False))

        st.write('## Clusteriza√ß√£o dos clientes com K-Means')

        X = df_RFV[['Recencia', 'Frequencia', 'Valor']]

        num_clusters = 3 

        kmeans = KMeans(n_clusters=num_clusters, random_state=42)
        kmeans.fit(X)

        df_RFV['Cluster'] = kmeans.labels_

        st.write(df_RFV.head())

        st.write('Quantidade de clientes por cluster')

        st.write(df_RFV['Cluster'].value_counts())

        df_RFV['acoes_resumidas'] = df_RFV['acoes de marketing/crm'].map(dict_acoes).fillna(df_RFV['acoes de marketing/crm'])

        st.write('### Quantidade de Clientes por Tipo de A√ß√£o (Resumido)')

        fig, ax = plt.subplots()
        sns.countplot(data=df_RFV, x='acoes_resumidas', ax=ax, palette='viridis')  # Usar 'acoes_resumidas'
        ax.set_title('Distribui√ß√£o de Clientes por Tipo de A√ß√£o')
        ax.set_xlabel('Tipo de A√ß√£o (Resumido)')
        ax.set_ylabel('Quantidade de Clientes')

        ax.set_xticklabels(ax.get_xticklabels(), rotation=45, ha='right')

        st.pyplot(fig)

        st.write('### Clusteriza√ß√£o dos Clientes')

        fig, ax = plt.subplots()
        sns.scatterplot(
            x=df_RFV['Recencia'], 
            y=df_RFV['Frequencia'], 
            hue=df_RFV['Cluster'], 
            palette='tab10',
            ax=ax
        )
        ax.set_title('Clusters dos Clientes (K-Means)')
        ax.set_xlabel('Rec√™ncia')
        ax.set_ylabel('Frequ√™ncia')

        st.pyplot(fig)

        st.write('### Quantidade de Clientes por Cluster')

        fig, ax = plt.subplots()
        df_RFV['Cluster'].value_counts().plot(kind='bar', ax=ax, color='skyblue')
        ax.set_title('Clientes por Cluster')
        ax.set_xlabel('Cluster')
        ax.set_ylabel('Quantidade')

        st.pyplot(fig)


if __name__ == '__main__':
	main()
    









